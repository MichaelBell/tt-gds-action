name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        cat << EOF >> $GITHUB_ENV
        OPENLANE_TAG=2023.09.11
        OPENLANE_IMAGE_NAME=efabless/openlane:7e5a2e9fb274c0a100b4859a927adce7089455ff
        OPENLANE_ROOT=/home/runner/openlane
        PDK_ROOT=/home/runner/pdk
        PDK=sky130A
        EOF

    # Install librsvg2-bin (for rsvg-convert) and pngquant (for heavy PNG compression)
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant
        version: tt05 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-support-tools
        path: tt
        ref: tt05

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config

    - name: Install OpenLane
      shell: bash
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT
        make

    - name: Make GDS with OpenLane
      shell: bash
      run: ./tt/tt_tool.py --harden

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Publish GDS artifact
      uses: actions/upload-artifact@v3
      with:
        name: GDS
        path: |
          src/*
          runs/wokwi/results/final/*
          runs/wokwi/reports/metrics.csv
          runs/wokwi/reports/synthesis/1-synthesis*
          runs/wokwi/OPENLANE_VERSION
          runs/wokwi/PDK_SOURCES
          runs/wokwi/config.tcl
          LICENSE

    # Create and store PNG...
    - name: Render SVG from GDS
      shell: bash
      run: ./tt/tt_tool.py --create-svg

    - name: Convert SVG to PNG
      shell: bash
      #NOTE: We avoid a cluttered labels mess by telling rsvg-convert to apply extra CSS that hides
      # all text. Since -s expects a CSS *file*, we instead pass it "<(echo 'text{display:none;}')"
      # which effectively creates a temporary/transient file that appears to contain the CSS we want:
      run: rsvg-convert --unlimited gds_render.svg -s <(echo 'text{display:none;}') -o gds_render_png24.png --no-keep-image-data

    - name: Shrink PNG
      shell: bash
      run: pngquant --quality 10-30 --speed 1 --nofs --strip --output gds_render.png gds_render_png24.png

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v3
      with:
        name: gds_render
        path: 'gds_render.png'
